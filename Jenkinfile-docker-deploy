pipeline {
     agent
     
    tools { 
        maven 'maven' 
      
    }
stages { 
     
 stage('Preparation') { 
     steps {
// for display purposes

      // Get some code from a GitHub repository
      
      git 'https://github.com/shivanani220/VProfile.git'

      // Get the Maven tool.
     
 // ** NOTE: This 'M3' Maven tool must be configured
 
     // **       in the global configuration.   
     }
   }

   stage('Build') {
       steps {
       // Run the maven build

      //if (isUnix()) {
         sh 'mvn -Dmaven.test.failure.ignore=true install'
      //} 
      //else {
      //   bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
       }
//}
   }
 
  stage('Unit Test Results') {
      steps {
      junit '**/target/surefire-reports/TEST-*.xml'
      
      }
 }
/* stage('Sonarqube') {
    environment {
        scannerHome = tool 'sonarqube'
    }
    steps {
        withSonarQubeEnv('sonarqube') {
            sh "${scannerHome}/bin/sonar-scanner"
        }
        timeout(time: 10, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
        }
    }
} */
/*     stage('Artifact upload') {
      steps {
             nexusPublisher nexusInstanceId: '1234', nexusRepositoryId: 'maven-releases', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: 'target/vprofile-v1.war']], mavenCoordinate: [artifactId: 'vprofile', groupId: 'com.visualpathit', packaging: 'war', version: '$BUILD_NUMBER']]] 
      }
 } */
    stage('Build and Push Docker Image') {
      steps {
        sh label: '', script: '''docker build -t vprofile-image:$BUILD_NUMBER .
                                 docker tag vprofile-image:$BUILD_NUMBER docker.io/shiva58/vprofile-image:$BUILD_NUMBER
                                 docker push docker.io/shiva58/vprofile-image:$BUILD_NUMBER'''
      }
 }
  stage('Update Image Version') {
      steps {
        sh label: '', script: '''sed -i s/latest/$BUILD_NUMBER/ deploy-kube.yml'''

      }
 }
  stage('Apply Kubernetes files') {
            steps {
             sh label: '', script: '''scp *.yml jenkins@13.59.50.238:/home/jenkins
                                  ssh jenkins@13.59.50.238 kubectl apply -f deploy-kube.yml
                                  ssh jenkins@13.59.50.238 kubectl apply -f service.yml'''
           
        }
     }
/* stage('Deploy to Kubernetes') {
         steps {
         withKubeConfig([credentialsId: 'jenkins-kube']) {
         sh 'kubectl config set-context $(kubectl config current-context) --namespace=default'
         sh 'kubectl apply -f GOL-Deploy.yml'
        }
        }
     }*/
}     
post {
        success {
            archiveArtifacts 'target/*.war'
        }
        failure {
            mail to:"shivanani58@gmail.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build failed"
        }
    }       
}
